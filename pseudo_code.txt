 
 SERVICES

// ================================================================================

// Service: createCustomer
// Purpose: Create a new customer with basic info, address, and contact mechanisms

parameters:
  - firstName
  - lastName
  - email
  - phone
  - dob
  - gender
  - addressMap (address1, address2, city, state, country, contactMechPurpose)
  - phoneMap (countryCode, phoneNumber, contactMechPurpose)
  - email
  - password

logic:
  - Validate required fields (firstName, lastName, etc)
  - Generate new partyId (using delegator.getNextSeqId("Party"))
  
  - createValue: Party
    partyId: [generated partyId]
    partyTypeId: "PERSON"
    statusId: "PARTY_ENABLED"
    fromDate: now()

  - createValue: Person
    partyId: [generated partyId]
    firstName: firstName
    lastName: lastName
    dob: dob
    gender: gender

  - createValue: PartyRole
    partyId: [generated partyId]
    partyRoleTypeId: "CUSTOMER"
    fromDate: now()
    
  - createValue: ContactMech
    contactMechId: [generated contactMechId]
    contactMechTypeId: "EMAIL_ADDRESS"
    emailString: email

  - createValue: PartyContactMech
    partyId: [generated partyId]
    contactMechId: [email contactMechId]
    contactMechPurposeId: contactMechPurpose
    fromDate: now()

  - If phone is present:
      - createValue: ContactMech (TYPE: TELECOM_NUMBER)
      - createValue: PhoneNumber using phoneMap
      - createValue: PartyContactMech
	    partyId: [generated partyId]
	    contactMechId: [email contactMechId]
	    contactMechPurposeId: contactMechPurpose
	    fromDate: now()

  - createValue: ContactMech (TYPE: POSTAL_ADDRESS)
      - createValue: PostalAddress using addressMap
      - createValue: PartyContactMech
	    partyId: [generated partyId]
	    contactMechId: [email contactMechId]
	    contactMechPurposeId: contactMechPurpose
	    fromDate: now()
	    
  - createValue: UserLogin
	    partyId: [generated partyId]
	    userLoginId: email | [generated userLoginId]
	    password: password
	    is_enabled: True
	    fromDate: now()
    
  - return success with created partyId
  
  
// ================================================================================


// Service: getCustomerById
// Purpose: Retrieve full customer info by partyId

parameters:
  - partyId

logic:
  - Find Party by partyId
  - If not found: return error "Customer Not Found"

  - Get associated Person record
  - Get list of ContactMech via PartyContactMech
  - For each ContactMech:
      - If EMAIL -> add to emailList
      - If PHONE -> get TelecomNumber and add to phoneList
      - If ADDRESS -> get PostalAddress and add to addressList

  - Aggregate all into a result map:
      {
        partyId,
        name,
        dob,
        gender,
        emails: [...],
        phones: [...],
        addresses: [...]
      }

  - return success with result


// ================================================================================



// Service: getCustomerList
// Purpose: Retrieve list of all customer' full info

parameters:
NONE

logic:
  - Find List of Parties with role CUSTOMER
  - If not found: return error "Customer Not Found"
  
  - Iterate over each party to get:
	  - Get associated Person records
	  - Get list of ContactMech via PartyContactMech
	  - For each ContactMech:
	      - If EMAIL -> add to emailList
	      - If PHONE -> get TelecomNumber and add to phoneList
	      - If ADDRESS -> get PostalAddress and add to addressList

  - Add the list of parties into a result map:
      parties:[
        [partyId,
        name,
        dob,
        gender,
        emails: [...],
        phones: [...],
        addresses: [...]],
        [partyId,
        name,
        dob,
        gender,
        emails: [...],
        phones: [...],
        addresses: [...]],
        [...]
        
      ]

  - return success with result


// ================================================================================


// Service: updateCustomer
// Purpose: Update person info, email, phone, and addresses

parameters:
  - partyId
  - firstName?, lastName?, dob?, gender?
  - email?
  - addressMap?
  - phoneMap?

logic:
  - Validate party exists
  - If person fields present:
      - update Person record
  - If email is updated:
      - Find current EMAIL ContactMech
      - Update email_string or expire old and create new contactMech
  - If phone is updated:
      - Same as above, update or insert new phone number
  - If address is updated:
      - Update existing PostalAddress or expire and insert new

  - return success
  
  
// ================================================================================


// Service: deleteCustomer
// Purpose: Soft-delete a customer by setting status and thru_dates

parameters:
  - partyId

logic:
  - Validate party exists
  - Set party.statusId = "PARTY_DISABLED"
  - Set thru_date = now() on:
      - Party
      - PartyRole
      - PartyContactMech
  - Note: do not physically delete any records

  - return success "Customer deleted"


// ================================================================================
